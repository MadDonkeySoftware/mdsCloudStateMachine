#!/usr/bin/env node
const mdsSdk = require('@maddonkeysoftware/mds-cloud-sdk-node');

const src = require('../src');
const globals = require('../src/globals');
const worker = require('../src/workers');
const appShutdown = require('../src/handlers/app_shutdown');

const directive = process.argv[2];
const logger = globals.getLogger();

const ensureSystemQueuesExist = async () => {
  // mds qs create --env localAdmin mds-sm-inFlightQueue && mds qs create --env localAdmin mds-sm-pendingQueue
  const queueNames = ['mds-sm-inFlightQueue', 'mds-sm-pendingQueue'];
  const client = await mdsSdk.getQueueServiceClient()
  const existingQueues = await client.listQueues();

  for (const queueName of queueNames) {
    const queueExists = existingQueues.some((q) => q.name === queueName);
    if (!queueExists) {
      logger.info(`Creating queue ${queueName}`);
      await client.createQueue(queueName);
    }
  }
};

const launchServer = async () => {
  await mdsSdk.initialize({
    identityUrl: process.env.MDS_IDENTITY_URL,
    account: process.env.MDS_SM_SYS_ACCOUNT,
    userId: process.env.MDS_SM_SYS_USER,
    password: process.env.MDS_SM_SYS_PASSWORD,
    sfUrl: process.env.MDS_SM_SF_URL,
    qsUrl: process.env.MDS_SM_QS_URL,
  });
  appShutdown.wire(() => process.exit(0));

  await ensureSystemQueuesExist();

  const port = process.env.APP_PORT || 8888;
  const app = src.buildApp();

  app.listen(port, () => logger.info(`Example app listening on port ${port}!`));
};

const launchWorker = async () => {
  await mdsSdk.initialize({
    identityUrl: process.env.MDS_IDENTITY_URL,
    account: process.env.MDS_SM_SYS_ACCOUNT,
    userId: process.env.MDS_SM_SYS_USER,
    password: process.env.MDS_SM_SYS_PASSWORD,
    sfUrl: process.env.MDS_SM_SF_URL,
    qsUrl: process.env.MDS_SM_QS_URL,
  });
  appShutdown.wire(worker.handleAppShutdown);

  await ensureSystemQueuesExist();

  worker.startWorker();
};

const commandLookup = {
  server: launchServer,
  worker: launchWorker,
};

const displayHelp = () => {
  const availableCommands = Object.keys(commandLookup).join(', ');
  logger.error(`Could not launch ${directive}. Available commands are ${availableCommands}`);
};

if (directive) {
  const cmd = directive.toLowerCase();
  const launcher = commandLookup[cmd];
  if (launcher) {
    launcher();
  } else {
    displayHelp();
  }
} else {
  displayHelp();
}
